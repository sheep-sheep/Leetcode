1. Find the max depth of a Tree.
2. Determine if a tree is balanced.
  1) my first approach is to create a helper method to get the height.
  2) however, i got stuck on the 2nd step about how to use my helper to get the result.
  3) I should refer to the basic definition and do the check to use both methods.
  We do this for each node in the tree, so the overall complexity of isBalanced will be O(N^2).
  This is a top down approach.
 Â   def depth(depth, root):
      if root:
          return max(depth(depth+1, root.left), depth(depth+1, root.right))
      return depth
  This is a bottom up approach.
    def depth(root):
        if root:
            return max(depth(root.left), depth(root.right))+1
        return 0
  Is there any difference between those 2 approaches of depth? I want to pass the height between different level, thus i create a variable to hold the value. Since i'm thinking about topdown approach, i'm passing the depth from top to leaf, that's why i use the auxilary variable.
  When creating the recusive method for Tree, think about the case for Leaf which is Root == None.
  
We can combine the traversal and calcualate together.

3. Inorder, Preorder,Post-order Traveral of the Tree
def inorder(root):
	stack, res = [], []
	while True:
		while root:
			stack.append(root) # the order of push to stack indicates the order of traversal.
			root = root.left
		if not stack:
			return res
		node = stack.pop()
		res.append(node.val)# Operate on the top one in stack which might be left or root.
		root = node.right
